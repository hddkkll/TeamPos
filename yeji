package map;

import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

// 결제, 회원이 모호함

//Order 기능
//cancel
//discount
//refund
enum OrderStatus {
	ORDER, DISCOUNT, CANCEL, REFUND, PAYED
};

//현금
//카드
enum PayType {
	CASH, CARD
};

class Menu {
	String name;
	int price;
}

class Table {
	int tableNo;
	OrderList orderList;
	// HashMap<Integer, OrderList> tables= new HashMap<Integer, OrderList>();
	Date date;
	boolean isPayed;

	// 테이블이동
	public void moveTable(int fromTable, int toTable) {// 강기훈

	}

	// 테이블주문합치기
	public void mergeTable(int fromTable, int toTable) {// 권예지

	}
}

// 중간에 담는 그릇이 필요
class OrderList {
	List<Orders> orderlist = new ArrayList<Orders>();
	Customers customer;

	// 주문내역을 보여줌
	public void listOrders() {// 권순조
		// 메뉴명-단가-수량-금액
	}

	// 주문
	public void addOrder(Orders order) { // Menu menu 신지혁

	}

	// 선택취소
	public void deleteOrder(Orders order) { // 강기훈

	}

	// 전체취소
	public void deleteOrderAll() { // 신지혁

	}

	// 에매한~ 수량변경
	public void changeQty(Menu menu, int qty) { // 일찬님

	}

	// 전부 현금결제 // 결제와 오더리스트의 연결이 애메함
	public void payCashAll(int amount) {// 권순조
		// 받을금액, 받은금액, 거스름돈
		// 시재액과 연결이 미흡
		// 테이블 초기화
		// 영수증출력
	}

	// 전부 카드결제
	public void payCardAll() { // 이힘찬
		// 받은금액
		// 테이블초기화
		// 영수증출력
	}

	public void payCash(int no, int amount) {// 권순조

	}

	public void payCard(int no, int amount) {// 권예지
//		class Menu {
//			String name;
//			int price;
//		}

		System.out.println("결제금액은 " + " 입니다.");

	}


	public void payDivideAmount(int amount) {// 일찬님

	}

//	print receipt
	public void printReceipt() {// 권예지 , 파라메터에 table의 주솟값을 받게 바꿔야할것같습니다..
		Table table = new Table();
		Pos pos = new Pos();
		PayType paytype = null;

		System.out.println("테이블 번호 : " + table.tableNo + "\n");
		System.out.println("거래 일시 : " + pos.date);
		System.out.println("거래 유형 : " + paytype);
		System.out.println("할부 기간 : 일시불");
		System.out.println("=====================================");
		System.out.println("메뉴 이름 \t\t단가\t수량\t금액\t");
		System.out.println("=====================================");
		System.out.println(orderlist);
		System.out.println("=====================================");
		System.out.println("총 합계 : ");
		System.out.println("받은 돈 : ");
		System.out.println("\t\t\t\t적립포인트:"+addPoints());

//		class Table {
//			int tableNo;
//			OrderList orderList;
//			// HashMap<Integer, OrderList> tables= new HashMap<Integer, OrderList>();
//			Date date;
//			boolean isPayed;
	}

	// 회원등록
	public void addMembers(Customers customers) {// 신지혁
	}

	// 포인트 적립
	public void addPoints(Customers customers, String phoneNumber) {// 강기훈

	}

	// 포인트 사용
	public void usePoints(Customers customers, String phoneNumber) {// 힘찬이

	}

	// 포인트 사용

}

class Orders {
	static Long orderId;
	Date orderDate;
	Menu menuItem;
	Payments payment;

}

interface Payments {
//	현금
//	카드
//	분할계산
	public void pay();

}

class CashPayments implements Payments {

	@Override
	public void pay() { // 일찬님
		System.out.println(PayType.CASH);
	}

	// 포인트 적립
	public void addPoints(Customers customers, String phoneNumber) { // 이힘찬

	}

	// 포인트 사용
	public void usePoints(Customers customers, String phoneNumber) {// 권순조

	}

}

class CardPayments implements Payments {

	@Override
	public void pay() {// 신지혁
		System.out.println(PayType.CARD);
	}

	// 포인트 적립
	public void addPoints(Customers customers, String phoneNumber) {// 권예지

	}

	// 포인트 사용
	public void usePoints(Customers customers, String phoneNumber) {// 강기훈

	}

}

class Customers {
	HashMap<String, Integer> customer = new HashMap<String, Integer>();// 키값: 전화번호,
	// 밸류값: 포인트

	// 고객 추가
	public void addCustomers(String phoneNumber) {// 권순조

	}

	// 고객 수정
	public void modifyCustomers(String oldPhoneNumber, String phoneNumber) {// 일찬님

	}

	// 고객 조회
	public void findCustomers(String phoneNumber) { // 신지혁

	}

	// 고객 탈퇴
	public void deleCustomers(String phoneNumber) { // 이힘찬

	}

	// 고객현황
	public void listCustomers() {// 강기훈

	}
}

class Pos {

	Scanner sc = new Scanner(System.in);

	// log 저장디렉토리
	String logPath = "C:\\temp\\log";

	// 시재금액
	Integer amount;
	List<Orders> orders = new ArrayList<Orders>();
	OrderList orderList;
	String date = Date.DateString(Calendar.getInstance()); // 포스기 현재 날짜 (예지)

	// 판매관리, 매출관리, 회원관리, 메뉴관리, 테이블관리, 시스템 종료

	// 주문(테이블)
	public void orderTable(Integer tableNo, Menu menu) { // 일찬님
		// 테이블에 order add
	}

	// 결제 (테이블)
	public void payTableCash(Integer tableNo, Integer amount) {// 이힘찬
		// 테이블에서 order를 하나씩 가져와서 결제함
	}

	public void payTableCard(Integer tableNo) {// 권순조
		// 테이블에서 order를 하나씩 가져와서 결제함
	}

	// 결제 (테이블)
	public void payTableCardAll(Integer tableNo) { // 일찬님
		// 테이블의 order를 한가지 결제형식으로
	}

	public void payTableCashAll(Integer tableNo, Integer amount) {// 이힘찬
		// 테이블의 order를 한가지 결제형식으로
	}

	List<Menu> menuItem = new ArrayList<Menu>();

	// 메뉴관리
	// 메뉴 추가
	public void addMenu(String name, Integer price) {// 이힘찬

	}

	// 메뉴 수정
	public void modifyMenu(String oldname, String name, Integer price) {// 신지혁

	}

	// 메뉴 삭제
	public void deleteMenu(String name) {// 권예지

	}

	// 테이블관리
	List<Table> tables = new ArrayList<Table>();

	// 테이블 추가
	public void addTables() {// 권순조

	}

	// 테이블 삭제
	public void deleteTables() {// 강기훈

	}

	// 고객관리
	Customers customers = new Customers();

	// 고객가입

	// 고객조회
	// 고객탈퇴
	// 고객현황

	// overloading
//	public void deleCustomers(String name) {
//		
//	}

	// 현금관리
	public void cashAdjustment() { // 이힘찬
		// 현금시재액을 보여준다

	}

	// 매출
	// 메뉴별 매출 (일별)
	public void printSalesMenu(String date) { // 강기훈
		// 메뉴-수량-금액
	}

	// 결제별 매출 (일별)
	public void printSalesPayment(String date) { // 신지혁
		// 메뉴-카드(현금)-수량-금액
	}

	// 엑셀 export (메뉴별,결제별 매출)
	public void exportToExcel(String salesType) {// 일찬님

	}

	// 데이터 저장 (시스템 종료시 데이터 저장)
	public void save(String date) { // 권예지
		try {
			FileOutputStream fos = new FileOutputStream(logPath, true);
			BufferedOutputStream bos = new BufferedOutputStream(fos);
			ObjectOutputStream oos = new ObjectOutputStream(bos);

			oos.write(amount);
			// 뭘 써야할지 모르겠어서;;;

			oos.close();
			bos.close();
			fos.close();
			System.out.println(date + " 저장  완료");

		} catch (Exception e) {
		}

	}

	// 데이터 로드 (시스템 시작시 데이터 로드)
	public void load(String date) {// 권예지

	}
	// 일별 log // method마다 util에서 정의된 것을 사용
}

public class Pro1_Frame {
	public static void main(String[] args) {

	}
}

class Date {
	public static String DateString(Calendar date) {
		return date.get(Calendar.YEAR) + "년" + (date.get(Calendar.MONTH) + 1) + "월" + date.get(Calendar.DATE) + "일";
	}

	public static String DateString(Calendar date, String opr) {
		return date.get(Calendar.YEAR) + opr + (date.get(Calendar.MONTH) + 1) + opr + date.get(Calendar.DATE);
	}

} // 현재 날짜 추가 (예지)
